# Build stage
FROM node:18.20.2-slim AS builder

WORKDIR /app

# Prevent Puppeteer from attempting to download Chromium during npm install
ENV PUPPETEER_SKIP_DOWNLOAD=true

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    && npm install -g node-gyp

# Copy package files first for better caching
COPY package*.json ./
COPY .npmrc ./

# Install all dependencies without native bindings
RUN npm config set python python3 \
    && npm config set unsafe-perm true \
    && npm config set pg_native false \
    && npm cache clean --force \
    && npm install --legacy-peer-deps --prefer-offline --no-audit --no-optional

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM node:18.20.2-slim

WORKDIR /app

# Install runtime dependencies including Chromium for Puppeteer
RUN apt-get update && apt-get install -y --no-install-recommends \
    tini \
    chromium \
    fonts-liberation \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Set environment variables
ENV NODE_ENV=production
ENV TZ=UTC
ENV NPM_CONFIG_PRODUCTION=false
ENV PUPPETEER_SKIP_DOWNLOAD=true
# Set the Chromium executable path for Puppeteer
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium

# Copy package files
COPY package*.json ./
COPY .npmrc ./

# Install production dependencies only
RUN npm cache clean --force && \
    npm ci --only=production --legacy-peer-deps --prefer-offline --no-audit

# Copy built assets from builder
COPY --from=builder /app/dist ./dist

# Copy required files
COPY .env.production .

# Set permissions
RUN chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (res) => { if (res.statusCode !== 200) throw new Error() }).on('error', () => process.exit(1))"

# Expose the port the app runs on
EXPOSE 3000

# Use tini as init process
ENTRYPOINT ["/sbin/tini", "--"]

# Start the application
CMD ["node", "dist/main.js"]
